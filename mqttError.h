#ifndef MQTT_ERROR_H_
#define MQTT_ERROR_H_

#include <string>

enum MQTT_ERROR {
    NO_ERROR = -1,
    MALFORMED_REMAIN_LENGTH = 0,
    MALFORMED_SUBSCRIBE_RESERVED_PART,
    MALFORMED_CONNECT_FLAG_BIT,
    MALFORMED_FIXED_HEADER_RESERVED_BIT,
    PROTOCOL_VIOLATION,
    NOT_CONNECTED,
    INVALID_MESSAGE_CAME,
    INVALID_MESSAGE_TYPE,
    INVALID_PROTOCOL_LEVEL,
    INVALID_PROTOCOL_NAME,
    CLIENT_NOT_EXIST,
    CLIENT_TIMED_OUT,
    CLIENT_ID_IS_USED_ALREADY,
    CLEANSESSION_MUST_BE_TRUE,
    PACKET_ID_IS_USED_ALREADY,
    PACKET_ID_SHOULD_BE_ZERO,
    PACKET_ID_SHOULD_NOT_BE_ZERO,
    USERNAME_DOES_NOT_EXIST_WITH_PASSWORD,
    INVALID_QOS_3,
    MULTI_LEVEL_WILDCARD_MUST_BE_ON_TAIL,
    WILDCARD_MUST_NOT_BE_ADJACENT_TO_NAME,
    PACKET_ID_DOES_NOT_EXIST,
    WILDCARD_CHARACTERS_IN_PUBLISH,
    FAIL_TO_SET_PACKET_ID,
    UNSUBSCRIBE_TO_NON_SUBSCRIBE_TOPIC,
};

static const std::string ErrorString[] = {
   "MALFORMED_REMAIN_LENGTH",
   "MALFORMED_SUBSCRIBE_RESERVED_PART",
   "MALFORMED_CONNECT_FLAG_BIT",
   "MALFORMED_FIXED_HEADER_RESERVED_BIT",
   "PROTOCOL_VIOLATION",
   "NOT_CONNECTED",
   "INVALID_MESSAGE_CAME",
   "INVALID_MESSAGE_TYPE",
   "INVALID_PROTOCOL_LEVEL",
   "INVALID_PROTOCOL_NAME",
   "CLIENT_NOT_EXIST",
   "CLIENT_TIMED_OUT",
   "CLIENT_ID_IS_USED_ALREADY",
   "CLEANSESSION_MUST_BE_TRUE",
   "PACKET_ID_IS_USED_ALREADY",
   "PACKET_ID_SHOULD_BE_ZERO",
   "PACKET_ID_SHOULD_NOT_BE_ZERO",
   "USERNAME_DOES_NOT_EXIST_WITH_PASSWORD",
   "INVALID_QOS_3",
   "MULTI_LEVEL_WILDCARD_MUST_BE_ON_TAIL",
   "WILDCARD_MUST_NOT_BE_ADJACENT_TO_NAME",
   "PACKET_ID_DOES_NOT_EXIST",
   "WILDCARD_CHARACTERS_IN_PUBLISH",
   "FAIL_TO_SET_PACKET_ID",
   "UNSUBSCRIBE_TO_NON_SUBSCRIBE_TOPIC",
};
    
#endif // MQTT_ERROR_H_
